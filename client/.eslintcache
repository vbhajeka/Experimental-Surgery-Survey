[{"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js":"1","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js":"2","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js":"3","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ConfirmPage.js":"4","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/NewOptions.js":"5","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/selectReducer.js":"6","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/questionBank.js":"7","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/FreeResponseOptions.js":"8","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionGrid.js":"9","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realOrder.js":"10","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/MultiQuestionOptions.js":"11","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js":"12","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js":"13","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/TestComp.js":"14","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js":"15","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js":"16","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js":"17","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realState.js":"18","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js":"19","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ImgComp.js":"20"},{"size":2872,"mtime":1610051541985,"results":"21","hashOfConfig":"22"},{"size":727,"mtime":1609975477297,"results":"23","hashOfConfig":"22"},{"size":405,"mtime":1609705430726,"results":"24","hashOfConfig":"22"},{"size":1061,"mtime":1609705430696,"results":"25","hashOfConfig":"22"},{"size":1541,"mtime":1609705430702,"results":"26","hashOfConfig":"22"},{"size":453,"mtime":1609705430721,"results":"27","hashOfConfig":"22"},{"size":2175,"mtime":1609705430717,"results":"28","hashOfConfig":"22"},{"size":1280,"mtime":1609705430698,"results":"29","hashOfConfig":"22"},{"size":2845,"mtime":1609705430705,"results":"30","hashOfConfig":"22"},{"size":3495,"mtime":1609705430720,"results":"31","hashOfConfig":"22"},{"size":2658,"mtime":1609705864679,"results":"32","hashOfConfig":"22"},{"size":9771,"mtime":1609931627375,"results":"33","hashOfConfig":"22"},{"size":194,"mtime":1609972704111,"results":"34","hashOfConfig":"22"},{"size":1976,"mtime":1610051522654,"results":"35","hashOfConfig":"22"},{"size":9478,"mtime":1610052465653,"results":"36","hashOfConfig":"22"},{"size":216,"mtime":1609972576346,"results":"37","hashOfConfig":"22"},{"size":928,"mtime":1609886670823,"results":"38","hashOfConfig":"22"},{"size":156272,"mtime":1610086278224,"results":"39","hashOfConfig":"22"},{"size":2973,"mtime":1609986412255,"results":"40","hashOfConfig":"22"},{"size":1214,"mtime":1610052057391,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m62ta2",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js",[],["92","93"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ConfirmPage.js",[],["94","95"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/NewOptions.js",["96"],"import 'semantic-ui-css/semantic.min.css';\nimport { Segment } from 'semantic-ui-react';\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './components.css';\nimport { selectAction } from '../actions/testAction';\n\nimport { selectOptionAction } from '../actions/surveyActions';\n\nconst NewOptions = ({ qDetails, selectOptionAction, currentQ_ID, ping }) => {\n  const clicked = function (message) {\n    console.log(message);\n    selectOptionAction(message);\n  };\n\n  console.log(qDetails);\n\n  return (\n    <Fragment>\n      {qDetails !== null &&\n        qDetails.options !== null &&\n        qDetails.options.length > 0 &&\n        qDetails.options.map((qOption) => (\n          <div key={qOption.value} onClick={() => clicked(qOption)}>\n            <div className='segContainer'>\n              <Segment\n                className={\n                  qDetails.value !== null &&\n                  qDetails.value.includes(qOption.value)\n                    ? 'selectedOption'\n                    : 'optionSegments'\n                }\n              >\n                {qOption.value}\n              </Segment>\n            </div>\n          </div>\n        ))}\n    </Fragment>\n  );\n};\n\nNewOptions.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  qDetails: state.survey.questions.find((q) => q.id === state.survey.current),\n  currentQ_ID: state.survey.current,\n  ping: state.survey.ping,\n});\n\nexport default connect(mapStateToProps, { selectAction, selectOptionAction })(\n  NewOptions\n);\n",["97","98"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/selectReducer.js",["99"],"import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\nconst initialState = {\n  options: [1, 2, 3, 4],\n  testRedux: 'asdf',\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  //console.log('indispatch');\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== payload);\n    default:\n      return state;\n  }\n}\n",["100","101"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/questionBank.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/FreeResponseOptions.js",["102","103","104","105","106"],"import React, { Fragment, useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Segment, Button } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './components.css';\nimport { selectAction } from '../actions/testAction';\n\nimport {\n  nextQuestionAction,\n  selectOptionAction,\n} from '../actions/surveyActions';\n\nconst FreeResponseOptions = ({ selectOptionAction }) => {\n  const [formData, setFormData] = useState({\n    textInput: '',\n  });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    selectOptionAction(e.target.value);\n  };\n\n  return (\n    <Fragment>\n      <textarea\n        rows='4'\n        name='textInput'\n        onChange={(e) => handleChange(e)}\n        className='textArea'\n      />\n    </Fragment>\n  );\n};\n\n// FreeResponseOptions.propTypes = {\n//   selectAction: PropTypes.func.isRequired,\n//   questionOptions: PropTypes.array.isRequired,\n//   selected: PropTypes.object,\n// };\n\nconst mapStateToProps = (state) => ({\n  questionOptions: state.questionBankReducer.current.options,\n  selected: state.questionBankReducer.current.selected,\n});\n\nexport default connect(mapStateToProps, {\n  selectOptionAction,\n})(FreeResponseOptions);\n","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionGrid.js",["107"],"import 'semantic-ui-css/semantic.min.css';\nimport '../index.css';\n\nimport { Grid, Header, Button, Container, Segment } from 'semantic-ui-react';\n\nimport MultiQuestionOptions from './MultiQuestionOptions';\nimport FreeResponseOptions from './FreeResponseOptions';\nimport NewOptions from './NewOptions';\n\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { nextQuestion, prevQuestion } from '../actions/testAction';\nimport {\n  nextQuestionAction,\n  prevQuestionAction,\n} from '../actions/surveyActions';\n\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst QuestionGrid = ({\n  nextQuestion,\n  prevQuestion,\n  questionTitle,\n  questionText,\n\n  currentId,\n  allDetails,\n  nextQuestionAction,\n  prevQuestionAction,\n  isFirst,\n  isLast,\n}) => {\n  const currDetails = allDetails.find((o) => o.id === currentId);\n\n  return (\n    <Fragment>\n      <Grid verticalAlign='middle'>\n        <Grid.Row columns={1}>\n          <Grid.Column>\n            <Header size='huge' id='questionTitleHeader'>\n              {currDetails.header}\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2} divided stretched>\n          <Grid.Column>\n            <Segment>\n              <p>{currDetails.text}</p>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            {(currDetails.type === 'MC' || currDetails.type === 'SATA') && (\n              <NewOptions />\n            )}\n            {currDetails.type === 'FR' && <FreeResponseOptions />}\n            {currDetails.type === 'MFR' && <MultiQuestionOptions />}\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            {!isFirst && (\n              <Button onClick={() => prevQuestionAction()}>Previous</Button>\n            )}\n          </Grid.Column>\n          <Grid.Column>\n            {!isLast && (\n              <Button onClick={() => nextQuestionAction()}>Next</Button>\n            )}\n            {isLast && <Button>Review</Button>}\n          </Grid.Column>\n        </Grid.Row>\n        <Link to='/confirm'>placeholder</Link>\n      </Grid>\n    </Fragment>\n  );\n};\n\nQuestionGrid.propTypes = {\n  nextQuestion: PropTypes.func.isRequired,\n  prevQuestion: PropTypes.func.isRequired,\n  questionText: PropTypes.string.isRequired,\n  questionTitle: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    questionTitle: state.questionBankReducer.current.title,\n    questionText: state.questionBankReducer.current.text,\n    currentId: state.survey.current,\n    allDetails: state.survey.questions,\n    isFirst: state.survey.firstQuestion,\n    isLast: state.survey.lastQuestion,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  nextQuestion,\n  prevQuestion,\n  nextQuestionAction,\n  prevQuestionAction,\n})(QuestionGrid);\n","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realOrder.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/MultiQuestionOptions.js",["108","109","110"],"import { getSuggestedQuery } from '@testing-library/react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Segment, Header, Dropdown } from 'semantic-ui-react';\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './components.css';\nimport { multiFreeResponseSelectAction } from '../actions/surveyActions';\n\nconst MultiQuestionOptions = ({\n  currentID,\n  questionBank,\n  multiFreeResponseSelectAction,\n}) => {\n  const onTextChange = (subQId, val) => {\n    console.log(subQId, val.target.value);\n    multiFreeResponseSelectAction(subQId, val.target.value);\n  };\n\n  const getOptions = (options) => {\n    options.forEach((o) => {\n      o.key = o.value;\n      o.text = o.value;\n    });\n    return options;\n  };\n\n  const currQ = questionBank.find((o) => o.id === currentID);\n\n  let subQuestions = [];\n\n  currQ.options.forEach((element) => {\n    subQuestions.push(questionBank.find((o) => o.id === element.q_id));\n  });\n\n  console.log(subQuestions);\n\n  const dropdownChange = (event, { value }, subQId) => {\n    multiFreeResponseSelectAction(subQId, value);\n  };\n\n  return (\n    <Fragment>\n      {subQuestions !== null &&\n        subQuestions.length > 0 &&\n        subQuestions.map((qOption) =>\n          qOption.type === 'MFRSATA' || qOption.type === 'MFRO' ? (\n            <div key={qOption.id}>\n              <Header block color={'red'} size={'large'}>\n                {qOption.header}\n              </Header>\n              <Dropdown\n                fluid\n                multiple={qOption.type === 'MFRSATA'}\n                selection\n                clearable\n                options={getOptions(qOption.options)}\n                onChange={(e, s) => dropdownChange(e, s, qOption.id)}\n                style={{ fontSize: '50%' }}\n              />\n            </div>\n          ) : (\n            //if MFRFR\n            <div key={qOption.id}>\n              <Header block color={'red'} size={'large'}>\n                {qOption.header}\n              </Header>\n              <input\n                name={qOption.value}\n                defaultValue={qOption.value}\n                onChange={(val) => onTextChange(qOption.id, val)}\n              ></input>\n            </div>\n          )\n        )}\n    </Fragment>\n  );\n};\n\nMultiQuestionOptions.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  questionOptions: state.questionBankReducer.current.options,\n  selected: state.questionBankReducer.current.selected,\n\n  currentID: state.survey.current,\n  questionBank: state.survey.questions,\n});\n\nexport default connect(mapStateToProps, { multiFreeResponseSelectAction })(\n  MultiQuestionOptions\n);\n","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js",["111"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/TestComp.js",["112"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js",[],["113","114"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realState.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ImgComp.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":17},{"ruleId":"115","replacedBy":"125"},{"ruleId":"117","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":20,"endColumn":2},{"ruleId":"115","replacedBy":"130"},{"ruleId":"117","replacedBy":"131"},{"ruleId":"121","severity":1,"message":"132","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":17},{"ruleId":"121","severity":1,"message":"133","line":3,"column":19,"nodeType":"123","messageId":"124","endLine":3,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":17},{"ruleId":"121","severity":1,"message":"134","line":7,"column":10,"nodeType":"123","messageId":"124","endLine":7,"endColumn":22},{"ruleId":"121","severity":1,"message":"135","line":10,"column":3,"nodeType":"123","messageId":"124","endLine":10,"endColumn":21},{"ruleId":"121","severity":1,"message":"136","line":4,"column":32,"nodeType":"123","messageId":"124","endLine":4,"endColumn":41},{"ruleId":"121","severity":1,"message":"137","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":27},{"ruleId":"121","severity":1,"message":"132","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":17},{"ruleId":"121","severity":1,"message":"122","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":17},{"ruleId":"121","severity":1,"message":"138","line":11,"column":7,"nodeType":"123","messageId":"124","endLine":11,"endColumn":19},{"ruleId":"121","severity":1,"message":"139","line":1,"column":25,"nodeType":"123","messageId":"124","endLine":1,"endColumn":31},{"ruleId":"115","replacedBy":"140"},{"ruleId":"117","replacedBy":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar",["142"],["143"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["142"],["143"],"'Segment' is defined but never used.","'Button' is defined but never used.","'selectAction' is defined but never used.","'nextQuestionAction' is defined but never used.","'Container' is defined but never used.","'getSuggestedQuery' is defined but never used.","'initialState' is assigned a value but never used.","'Header' is defined but never used.",["142"],["143"],"no-global-assign","no-unsafe-negation"]