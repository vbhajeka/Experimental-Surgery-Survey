[{"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js":"1","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ConfirmPage.js":"2","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/HomePage.js":"3","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js":"4","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/stateReducer.js":"5","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js":"6","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js":"7","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js":"8","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/images/logo.js":"9","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realState.js":"10","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js":"11","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/stateActions.js":"12","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js":"13","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js":"14","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js":"15","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportPage.js":"16","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/exportReducer.js":"17","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/exportActions.js":"18","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModal.js":"19","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModalContent.js":"20"},{"size":1395,"mtime":1610759092980,"results":"21","hashOfConfig":"22"},{"size":1061,"mtime":1609705430696,"results":"23","hashOfConfig":"22"},{"size":5151,"mtime":1610921777500,"results":"24","hashOfConfig":"22"},{"size":709,"mtime":1610910763038,"results":"25","hashOfConfig":"22"},{"size":1950,"mtime":1610885614260,"results":"26","hashOfConfig":"22"},{"size":405,"mtime":1609705430726,"results":"27","hashOfConfig":"22"},{"size":12475,"mtime":1610921731384,"results":"28","hashOfConfig":"22"},{"size":544,"mtime":1610761064622,"results":"29","hashOfConfig":"22"},{"size":109284,"mtime":1610150738198,"results":"30","hashOfConfig":"22"},{"size":3818,"mtime":1610410997743,"results":"31","hashOfConfig":"22"},{"size":1733,"mtime":1610498768597,"results":"32","hashOfConfig":"22"},{"size":667,"mtime":1610885624720,"results":"33","hashOfConfig":"22"},{"size":5836,"mtime":1610919793262,"results":"34","hashOfConfig":"22"},{"size":6361,"mtime":1610667689659,"results":"35","hashOfConfig":"22"},{"size":6240,"mtime":1610930987319,"results":"36","hashOfConfig":"22"},{"size":5216,"mtime":1610929329356,"results":"37","hashOfConfig":"22"},{"size":974,"mtime":1610922297644,"results":"38","hashOfConfig":"22"},{"size":379,"mtime":1610922143150,"results":"39","hashOfConfig":"22"},{"size":4512,"mtime":1610922180114,"results":"40","hashOfConfig":"22"},{"size":3689,"mtime":1610928000717,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1m62ta2",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/index.js",[],["92","93"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ConfirmPage.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/HomePage.js",["94","95"],"import { Grid, Segment, Image, Container } from 'semantic-ui-react';\n\nimport { useHistory, Link } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport '../index.css';\nimport { Fragment } from 'react';\n\nimport { logo } from '../images/logo';\n\nimport axios from 'axios';\n\nimport { connect as reduxConnect } from 'react-redux';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nimport { setSurveyData } from '../actions/blockActions';\nimport { toggleExportModal } from '../actions/stateActions';\n\nimport ExportModal from './ExportModal';\n\nconst HomePage = ({\n  submitted,\n  token,\n  setSurveyData,\n  continueToSurvey,\n  toggleExportModal,\n  isAdmin = true,\n}) => {\n  const history = useHistory();\n\n  const {\n    isAuthenticated,\n    loginWithRedirect,\n    logout,\n    isLoading,\n    user,\n  } = useAuth0();\n\n  const attemptLogin = () => {\n    if (isLoading) {\n      return;\n    }\n    if (!isAuthenticated) {\n      loginWithRedirect();\n    } else {\n      logout({ returnTo: window.location.origin });\n    }\n  };\n\n  console.log(continueToSurvey);\n  console.log(isLoading);\n  console.log(isAdmin ? 2 : 1);\n\n  return (\n    <Fragment>\n      <ExportModal />\n      <Container>\n        <Grid>\n          <Grid.Row>\n            {submitted && (\n              <Segment\n                style={{ position: 'absolute', top: 0, width: '100%' }}\n                color={'green'}\n                inverted\n              >\n                Thank you for Submitting! An email with your selections has been\n                sent to {user.email}!\n              </Segment>\n            )}\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <div\n                style={{\n                  color: 'white',\n                  fontSize: '100%',\n                  lineHeight: '2em',\n                  textAlign: 'center',\n                }}\n              >\n                <Image\n                  src={logo}\n                  alt='Red dot'\n                  centered\n                  style={{ marginTop: '4%' }}\n                />\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n          {isAuthenticated && (\n            <Container style={{ position: 'absolute', bottom: '3.6%' }}>\n              <Grid.Row columns={1}>\n                <Grid.Column>\n                  <Link to='/survey'>\n                    <Segment\n                      inverted\n                      color={'blue'}\n                      style={{\n                        lineHeight: '2rem',\n                        fontSize: '1.5rem',\n                        margin: '3%',\n                        width: '97%',\n                      }}\n                    >\n                      Begin Operative Summary\n                    </Segment>\n                  </Link>\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row columns={isAdmin ? 2 : 1}>\n                <Grid.Column>\n                  <Segment\n                    inverted\n                    color={'green'}\n                    style={{\n                      lineHeight: '2rem',\n                      fontSize: '1.5rem',\n                      margin: '3%',\n                      width: '97%',\n                    }}\n                    //onClick={() => getSurveys('2020-12-01', '2021-2-1')}\n                  >\n                    View Previous Surveys\n                  </Segment>\n                </Grid.Column>\n                {isAdmin && (\n                  <Grid.Column>\n                    <Segment\n                      inverted\n                      color={'green'}\n                      style={{\n                        lineHeight: '2rem',\n                        fontSize: '1.5rem',\n                        margin: '3%',\n                        width: '97%',\n                      }}\n                      //onClick={() => getSurveys('2020-12-01', '2021-2-1')}\n                      onClick={() => toggleExportModal()}\n                    >\n                      Export Surveys\n                    </Segment>\n                  </Grid.Column>\n                )}\n              </Grid.Row>\n            </Container>\n          )}\n          {!isAuthenticated && (\n            <Container style={{ padding: '4rem' }}>\n              <Grid>\n                <Grid.Row columns={'1'}>\n                  <Grid.Column>\n                    <Segment\n                      disabled={isLoading}\n                      inverted\n                      color={'blue'}\n                      onClick={() => attemptLogin()}\n                      style={{ lineHeight: '2rem', fontSize: '1.5rem' }}\n                    >\n                      Click here to login and fill out survey\n                    </Segment>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Container>\n          )}\n        </Grid>\n      </Container>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    submitted: state.state.submitted,\n    token: state.state.auth0Token,\n    continueToSurvey: state.blocks.cont,\n  };\n};\n\nexport default reduxConnect(mapStateToProps, {\n  setSurveyData,\n  toggleExportModal,\n})(HomePage);\n",["96","97"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/types.js",[],["98","99"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/stateReducer.js",["100","101"],"import {\n  TOGGLE_CANCEL_MODAL,\n  BACK_TO_HOME,\n  SET_TOKEN,\n  SUBMIT_SURVEY,\n  TOGGLE_EXPORT_MODAL,\n  DATE_CHANGED,\n} from '../actions/types';\n\nimport axios from 'axios';\nimport { setExportData } from '../actions/exportActions';\n\nconst initialState = {\n  auth0Token: null,\n  cancelModalIsOpen: false,\n  submitted: false,\n  exportModal: {\n    isOpen: false,\n    startDate: '',\n    endDate: '',\n    datesLegal: false,\n  },\n};\n\nconst toggleCancelModal = (state) => {\n  state.cancelModalIsOpen = !state.cancelModalIsOpen;\n  return state;\n};\n\nconst toggleExportModal = (state) => {\n  if (state.exportModal.isOpen) {\n    state.exportModal = {\n      isOpen: false,\n      startDate: '',\n      endDate: '',\n      datesLegal: false,\n    };\n  } else {\n    state.exportModal.isOpen = true;\n  }\n  return state;\n};\n\nconst handleDateChanged = (state, isStart, val) => {\n  console.log(isStart, val);\n  if (isStart) {\n    state.exportModal.startDate = val;\n  } else {\n    state.exportModal.endDate = val;\n  }\n  if (state.exportModal.startDate !== '' && state.exportModal.endDate !== '') {\n    state.exportModal.datesLegal =\n      new Date(state.exportModal.startDate) <\n      new Date(state.exportModal.endDate);\n  }\n  return { ...state };\n};\n\nexport default function reducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case TOGGLE_CANCEL_MODAL:\n      return { ...toggleCancelModal(state) };\n    case BACK_TO_HOME:\n      state.cancelModalIsOpen = false;\n      state.submitted = false;\n      return { ...state };\n    case SET_TOKEN:\n      state.auth0Token = payload.token;\n      return { ...state };\n    case SUBMIT_SURVEY:\n      state.submitted = true;\n      return { ...state };\n    case TOGGLE_EXPORT_MODAL:\n      return { ...toggleExportModal(state) };\n    case DATE_CHANGED:\n      return {\n        ...handleDateChanged(state, payload.date === 'start', payload.val),\n      };\n\n    default:\n      return state;\n  }\n}\n","/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/store.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/QuestionBlock.js",["102"],"import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  Container,\n  Header,\n  Grid,\n  Segment,\n  Dropdown,\n  Progress,\n  Image,\n  Modal,\n  Icon,\n  Button,\n} from 'semantic-ui-react';\n\nimport { Link, useHistory } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './components.css';\n\nimport {\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n} from '../actions/blockActions';\n\nimport { modalActions } from '../actions/stateActions';\n\nconst QuestionBlock = ({\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n  modalActions,\n  questions,\n  block_id,\n  blocks,\n  current_block,\n  blocks_seen,\n  ping,\n  cancelModalIsOpen,\n}) => {\n  // make sure we have questions to display - if not, redirect to home page\n  const history = useHistory();\n  if (blocks === undefined) {\n    history.push('/');\n    return <div>empty</div>;\n  }\n  // set current block & questions\n  current_block = blocks.find((b) => b.block_id === block_id);\n  questions = current_block.questions;\n\n  const isSelected = (value, option) => {\n    return (value, value.find((o) => o === option.value) !== undefined)\n      ? 'orange'\n      : 'black';\n  };\n\n  const dropdownChange = (event, { value }, qId) => {\n    console.log(value, qId);\n    dropDownSelect(block_id, qId, value);\n  };\n\n  const getOptions = (options) => {\n    let ddOptions = [];\n    options.forEach((o) => {\n      ddOptions.push({ key: o.value, value: o.value, text: o.value });\n    });\n    return ddOptions;\n  };\n\n  const onTextChange = (qId, val) => {\n    console.log(qId, val);\n    updateFRAction(block_id, qId, val);\n  };\n\n  const reviewClicked = () => {\n    console.log('review clicked');\n  };\n\n  const reviewEnabled = () => {\n    let unfinished = blocks.filter(\n      (b) => b.required && b.enabled && nextDisabled(b.block_id)\n    );\n    let curr_index = blocks.indexOf(\n      blocks.find((b) => b.block_id === block_id)\n    );\n\n    if (blocks_seen !== undefined) {\n      for (let i = curr_index; i < blocks.length; i++) {\n        const this_block = blocks[i];\n        if (this_block.enabled && !blocks_seen.includes(blocks[i].block_id)) {\n          return false;\n        }\n      }\n    }\n    return unfinished.length > 0 ? false : true;\n  };\n\n  const nextDisabled = (b_id = block_id) => {\n    console.log('checking to enable next', b_id);\n    let currBlock = blocks.find((b) => b.block_id === b_id);\n    let unfinished = currBlock.questions.filter(\n      (q) =>\n        q.required && q.enabled && (q.value === null || q.value.length === 0)\n    );\n    console.log(\n      unfinished === undefined || unfinished.length > 0\n        ? 'not done'\n        : 'all done'\n    );\n    return unfinished === undefined || unfinished.length > 0 ? true : false;\n  };\n\n  const nextDisabledVar = nextDisabled();\n\n  const previousVisible = () => {\n    let check = blocks.indexOf(blocks.find((b) => b.block_id === block_id)) - 1;\n    while (check >= 0) {\n      if (blocks[check].enabled) {\n        return true;\n      }\n      check--;\n    }\n    return false;\n  };\n\n  const nextVisible = () => {\n    let check = blocks.indexOf(blocks.find((b) => b.block_id === block_id)) + 1;\n    while (check < blocks.length) {\n      if (blocks[check].enabled) {\n        return true;\n      }\n      check++;\n    }\n    return false;\n  };\n\n  const getProgress = () => {\n    console.log(blocks);\n    const numEnabled = blocks.filter((b) => b.enabled);\n    let numCompleted = 1;\n    for (\n      let i = 0;\n      i < blocks.indexOf(blocks.find((b) => b.block_id === block_id));\n      i++\n    ) {\n      if (blocks[i].enabled) {\n        numCompleted++;\n      }\n    }\n    console.log(Math.floor((numCompleted / numEnabled.length) * 100));\n    return Math.floor((numCompleted / numEnabled.length) * 100);\n  };\n\n  const nextBlockActionLocal = () => {\n    if (!nextDisabledVar) {\n      console.log('here');\n      nextBlockAction();\n    } else {\n      console.log('not done');\n    }\n  };\n\n  console.log('cancel: ', cancelModalIsOpen);\n\n  const getDefaultValue = (type, val) => {\n    if (val === []) {\n      return [];\n    }\n    if (type === 'DDS') {\n      return val[0];\n    } else {\n      return val;\n    }\n  };\n\n  const getAllQIds = () => {\n    let ids = [];\n    let retVal = '';\n    blocks.forEach((b) => {\n      b.questions.forEach((q) => {\n        ids.push(q.id);\n        retVal += q.id + ', ';\n      });\n    });\n    console.log(ids);\n    console.log(retVal);\n    return retVal;\n  };\n\n  return (\n    <Fragment>\n      <Modal basic open={cancelModalIsOpen}>\n        <Modal.Content>\n          <p>\n            Are you sure you'd like to abandon this survey and return to the\n            home page? All survey data will be lost\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Link to='/'>\n            <Button color='red' inverted onClick={() => modalActions(true)}>\n              <Icon name='remove' /> Abandon\n            </Button>\n          </Link>\n          <Button color='green' inverted onClick={() => modalActions(false)}>\n            <Icon name='checkmark' /> Continue Survey\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      <Progress percent={getProgress()} color={'blue'} progress active />\n      <Container\n        fluid\n        id='header'\n        style={{\n          backgroundColor: 'white',\n          padding: '2%',\n          paddingBottom: '1.5%',\n          borderRadius: '10px',\n        }}\n      >\n        {current_block.required && (\n          <Header size={'tiny'} color={'blue'} style={{ fontSize: '70%' }}>\n            {current_block.block_header}\n          </Header>\n        )}\n        {!current_block.required && (\n          <Header size={'tiny'} color={'orange'} style={{ fontSize: '70%' }}>\n            {current_block.block_header} (Optional)\n          </Header>\n        )}\n        <Container text fluid>\n          <p>{current_block.block_description}</p>\n        </Container>\n      </Container>\n      <Container\n        style={{ overflowX: 'auto', marginBottom: '6.5%', marginTop: '2%' }}\n      >\n        {questions.map(\n          (q) =>\n            q.enabled && (\n              <Container fluid key={q.id} className={'questionBlock'}>\n                <Grid divided stackable columns={2}>\n                  <Grid.Row>\n                    <Grid.Column textAlign={'left'} width={8}>\n                      <Container text fluid style={{ maxWidth: '30%' }}>\n                        <Header size={'tiny'}>{q.question_header}</Header>\n                        <p>{q.question_desc}</p>\n                        {console.log(q.img)}\n                        {q.img !== undefined &&\n                          q.img !== null &&\n                          q.img !== '' && <Image src={q.img} fluid />}\n                        {q.long_question_desc != null &&\n                          q.long_question_desc.length > 0 &&\n                          q.long_question_desc.map((desc) => (\n                            <p key={desc}>{desc}</p>\n                          ))}\n                      </Container>\n                    </Grid.Column>\n                    <Grid.Column width={8} textAlign={'right'}>\n                      <Container\n                        fluid\n                        style={{\n                          display: 'flex',\n                          flexFlow: 'wrap',\n                        }}\n                      >\n                        {(q.type === 'MC' || q.type === 'SATA') &&\n                          q.options.map((o) => (\n                            <Segment\n                              textAlign={'center'}\n                              inverted\n                              color={isSelected(q.value, o)}\n                              onClick={() =>\n                                blockAction(block_id, q.id, o.value)\n                              }\n                              key={o.value}\n                              style={{\n                                margin: '1%',\n                                fontSize: '1.1rem',\n                              }}\n                              className={'selectButtons'}\n                            >\n                              {o.value}\n                            </Segment>\n                          ))}\n                        {(q.type === 'DDS' || q.type === 'DDM') && (\n                          <Container key={q.id}>\n                            <Dropdown\n                              fluid\n                              multiple={q.type === 'DDM'}\n                              selection\n                              clearable\n                              defaultValue={getDefaultValue(q.type, q.value)}\n                              options={getOptions(q.options)}\n                              onChange={(e, s) => dropdownChange(e, s, q.id)}\n                              style={{ fontSize: '1rem' }}\n                            />\n                          </Container>\n                        )}\n                        {q.type === 'FR' && (\n                          <Container key={q.id}>\n                            <input\n                              name={q.value}\n                              defaultValue={\n                                q.fr_type === 'date'\n                                  ? new Date().toISOString().substr(0, 10)\n                                  : q.value\n                              }\n                              type={q.fr_type}\n                              onChange={(val) =>\n                                onTextChange(q.id, val.target.value)\n                              }\n                              className={'inputField'}\n                            ></input>\n                          </Container>\n                        )}\n                      </Container>\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              </Container>\n            )\n        )}\n      </Container>\n      <Container\n        className={'bottomButtons'}\n        style={{ position: 'absolute', bottom: '3.6%' }}\n      >\n        <Grid container>\n          <Grid.Row columns={'4'}>\n            <Grid.Column floated='left'>\n              {previousVisible() && (\n                <Segment\n                  style={{ margin: '2%' }}\n                  inverted\n                  color={'blue'}\n                  onClick={() => prevBlockAction()}\n                  className={'buttonSegEnabled'}\n                >\n                  Previous\n                </Segment>\n              )}\n            </Grid.Column>\n            <Grid.Column floated='left'>\n              <Segment\n                style={{ margin: '2%' }}\n                inverted\n                color={'red'}\n                onClick={() => modalActions(false)}\n                className={'buttonSegEnabled'}\n              >\n                Cancel\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              {reviewEnabled() && (\n                <Link to='/review'>\n                  <Segment\n                    style={{ margin: '2%' }}\n                    inverted\n                    color={'green'}\n                    onClick={() => reviewClicked()}\n                    className={'buttonSegEnabled'}\n                  >\n                    Review\n                  </Segment>\n                </Link>\n              )}\n            </Grid.Column>\n            <Grid.Column floated='right'>\n              {nextVisible() && (\n                <Segment\n                  style={{ margin: '2%' }}\n                  inverted\n                  color={'blue'}\n                  onClick={() => nextBlockActionLocal()}\n                  disabled={nextDisabledVar}\n                  className={\n                    nextDisabledVar ? 'buttonSegDisabled' : 'buttonSegEnabled'\n                  }\n                >\n                  Next\n                </Segment>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    // questions: state.blocks.questions,\n    ping: state.blocks.ping,\n\n    block_id: state.blocks.current,\n    blocks: state.blocks.blocks,\n    blocks_seen: state.blocks.blocks_seen,\n\n    cancelModalIsOpen: state.state.cancelModalIsOpen,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  blockAction,\n  dropDownSelect,\n  updateFRAction,\n  nextBlockAction,\n  prevBlockAction,\n  modalActions,\n})(QuestionBlock);\n",["103","104"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/index.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/images/logo.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/realState.js",[],["105","106"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/blockActions.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/stateActions.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ReviewBlock.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/blockReducer.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/App.js",["107","108","109"],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportPage.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/reducers/exportReducer.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/actions/exportActions.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModal.js",[],"/Users/varunbhajekar/MyCode/Personal/MERN-course-varun/client/src/components/ExportModalContent.js",["110"],"import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n  Modal,\n  Header,\n  Table,\n  Container,\n  Button,\n  Icon,\n} from 'semantic-ui-react';\n\nimport { toggleOpenSpecific } from '../actions/exportActions';\nimport { toggleExportModal } from '../actions/stateActions';\n\nimport './components.css';\n\nconst ExportModalContent = ({ toggleOpenSpecific, isOpen, surveys, index }) => {\n  console.log(surveys);\n  const currSurvey = surveys.find((s) => s.date === index);\n\n  const getVals = (values) => {\n    let retVal = '';\n    values.forEach((v) => {\n      retVal += `${v}, `;\n    });\n    return retVal.substring(0, retVal.length - 2);\n  };\n\n  const groupSurveysByBlocks = (serv) => {\n    let retVal = [];\n    let currBlock;\n    serv.surveyAnswers.forEach((s) => {\n      const exists = retVal.find((x) => x.blockName === s.block);\n      if (exists) {\n        exists.questions.push(s);\n      } else {\n        currBlock = { blockName: '', questions: [] };\n        currBlock.blockName = s.block;\n        currBlock.questions.push(s);\n        retVal.push(currBlock);\n      }\n    });\n    return retVal;\n  };\n\n  let blocks;\n\n  if (isOpen) {\n    blocks = groupSurveysByBlocks(currSurvey);\n    console.log(blocks);\n  }\n\n  return (\n    <Fragment>\n      {isOpen && (\n        <Modal open={isOpen} basic closeIcon closeOnDimmerClick>\n          <Modal.Content>\n            <Container\n              fluid\n              id='header'\n              style={{\n                backgroundColor: 'white',\n                padding: '3%',\n                borderRadius: '10px',\n              }}\n            >\n              <Header size={'tiny'} color={'blue'} style={{ fontSize: '70%' }}>\n                Review Selections\n              </Header>\n            </Container>\n            <Container\n              style={{\n                overflowX: 'scroll',\n                marginTop: '2%',\n              }}\n            >\n              {blocks.map((block) => (\n                <Container\n                  key={block.block_id}\n                  style={{\n                    backgroundColor: 'white',\n                    padding: '2.5%',\n                    borderRadius: '10px',\n                    margin: '1%',\n                  }}\n                >\n                  <Header\n                    size={'tiny'}\n                    style={{ fontSize: '55%' }}\n                    color={'blue'}\n                  >\n                    {block.blockName}\n                  </Header>\n                  <Table striped celled style={{ fontSize: '45%' }}>\n                    <Table.Body>\n                      {block.questions.map((q) => (\n                        <Table.Row key={`${q.id}`}>\n                          <Table.Cell width={'8'}>{q.question}</Table.Cell>\n                          <Table.Cell>\n                            <Header size={'tiny'}>{getVals(q.value)}</Header>\n                          </Table.Cell>\n                        </Table.Row>\n                      ))}\n                    </Table.Body>\n                  </Table>\n                </Container>\n              ))}\n            </Container>\n          </Modal.Content>\n          <Modal.Actions style={{ textAlign: 'center' }}>\n            <Button color='red' inverted onClick={() => toggleOpenSpecific()}>\n              <Icon name='remove' /> Close\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isOpen: state.exportData.openSpecific,\n    surveys: state.exportData.surveyData,\n    index: state.exportData.toDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, { toggleOpenSpecific })(\n  ExportModalContent\n);\n",["111","112"],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":11,"column":8,"nodeType":"119","messageId":"120","endLine":11,"endColumn":13},{"ruleId":"117","severity":1,"message":"121","line":29,"column":9,"nodeType":"119","messageId":"120","endLine":29,"endColumn":16},{"ruleId":"113","replacedBy":"122"},{"ruleId":"115","replacedBy":"123"},{"ruleId":"113","replacedBy":"124"},{"ruleId":"115","replacedBy":"125"},{"ruleId":"117","severity":1,"message":"118","line":10,"column":8,"nodeType":"119","messageId":"120","endLine":10,"endColumn":13},{"ruleId":"117","severity":1,"message":"126","line":11,"column":10,"nodeType":"119","messageId":"120","endLine":11,"endColumn":23},{"ruleId":"117","severity":1,"message":"127","line":182,"column":9,"nodeType":"119","messageId":"120","endLine":182,"endColumn":19},{"ruleId":"113","replacedBy":"128"},{"ruleId":"115","replacedBy":"129"},{"ruleId":"113","replacedBy":"130"},{"ruleId":"115","replacedBy":"131"},{"ruleId":"117","severity":1,"message":"132","line":15,"column":3,"nodeType":"119","messageId":"120","endLine":15,"endColumn":11},{"ruleId":"117","severity":1,"message":"133","line":16,"column":3,"nodeType":"119","messageId":"120","endLine":16,"endColumn":7},{"ruleId":"117","severity":1,"message":"134","line":17,"column":3,"nodeType":"119","messageId":"120","endLine":17,"endColumn":12},{"ruleId":"117","severity":1,"message":"135","line":14,"column":10,"nodeType":"119","messageId":"120","endLine":14,"endColumn":27},{"ruleId":"113","replacedBy":"136"},{"ruleId":"115","replacedBy":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.",["138"],["139"],["138"],["139"],"'setExportData' is defined but never used.","'getAllQIds' is assigned a value but never used.",["138"],["139"],["138"],["139"],"'Dropdown' is defined but never used.","'Menu' is defined but never used.","'Container' is defined but never used.","'toggleExportModal' is defined but never used.",["138"],["139"],"no-global-assign","no-unsafe-negation"]